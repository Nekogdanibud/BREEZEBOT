from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict, Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
MANAGE_BUTTON = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
DEVICES_BUTTON = "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
RENEW_BUTTON = "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å"
TRANSFER_BUTTON = "üë§ –ü–µ—Ä–µ–¥–∞—Ç—å"
REMOVE_BUTTON = "üóë –£–¥–∞–ª–∏—Ç—å"
CANCEL_BUTTON = "‚ùå –û—Ç–º–µ–Ω–∞"
PREV_PAGE_BUTTON = "‚óÄÔ∏è"
NEXT_PAGE_BUTTON = "‚ñ∂Ô∏è"
HELP_BUTTON = "‚ùì –ü–æ–º–æ—â—å"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
DEVICES_PER_PAGE = 5

def get_main_menu_kb(role: str = "USER") -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu:profile")
    builder.button(text="üíé –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu:subscriptions")
    
    if role in ["ADMIN", "SUPPORT"]:
        builder.button(text="üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu:support")
    if role == "ADMIN":
        builder.button(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu:admin")
    
    builder.button(text=HELP_BUTTON, callback_data="menu:help")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ 1)
    builder.adjust(2, 1)
    return builder.as_markup()

def get_subscriptions_list_kb(subscriptions: List[Dict]) -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    for sub in subscriptions:
        builder.button(
            text=sub['username'],
            callback_data=f"subscription_detail:{sub['uuid']}"
        )
    
    builder.button(text="üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
    builder.button(text=BACK_BUTTON, callback_data="menu:main")
    
    builder.adjust(1, 2)
    return builder.as_markup()

def get_subscription_detail_kb(subscription_uuid: str, subscription_url: str) -> InlineKeyboardMarkup:
    """–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", url=subscription_url)
    builder.button(text=MANAGE_BUTTON, callback_data=f"manage_subscription:{subscription_uuid}")
    builder.button(text=BACK_BUTTON, callback_data="menu:subscriptions")
    
    builder.adjust(1, 1, 1)
    return builder.as_markup()

def get_manage_subscription_kb(subscription_uuid: str) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text=RENEW_BUTTON, callback_data=f"renew_subscription:{subscription_uuid}")
    builder.button(text=DEVICES_BUTTON, callback_data=f"view_devices:{subscription_uuid}:0")
    builder.button(text=TRANSFER_BUTTON, callback_data=f"transfer_subscription:{subscription_uuid}")
    builder.button(text=BACK_BUTTON, callback_data=f"subscription_detail:{subscription_uuid}")
    
    builder.adjust(1, 2, 1)
    return builder.as_markup()

def get_device_list_kb(
    subscription_uuid: str,
    devices: List[Dict],
    page: int,
    total_pages: int
) -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    for device in devices:
        device_name = f"{device['platform']} {device['device_model']}".strip() or device['hwid'][:8]
        builder.button(
            text=device_name,
            callback_data=f"device_details:{subscription_uuid}:{device['hwid'][:8]}"
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(
                text=PREV_PAGE_BUTTON,
                callback_data=f"view_devices:{subscription_uuid}:{page-1}"
            )
        )
    if page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(
                text=NEXT_PAGE_BUTTON,
                callback_data=f"view_devices:{subscription_uuid}:{page+1}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(*pagination_row)
    builder.button(text=BACK_BUTTON, callback_data=f"manage_subscription:{subscription_uuid}")
    
    builder.adjust(1, *[1]*len(devices), len(pagination_row), 1)
    return builder.as_markup()

def get_device_details_kb(subscription_uuid: str, hwid: str) -> InlineKeyboardMarkup:
    """–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=REMOVE_BUTTON,
        callback_data=f"remove_device:{subscription_uuid}:{hwid[:8]}"
    )
    builder.button(
        text=BACK_BUTTON,
        callback_data=f"view_devices:{subscription_uuid}:0"
    )
    
    builder.adjust(1, 1)
    return builder.as_markup()

def get_cancel_transfer_kb(subscription_uuid: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥–∞—á–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=CANCEL_BUTTON,
        callback_data=f"cancel_transfer:{subscription_uuid}"
    )
    return builder.as_markup()

def get_back_to_devices_kb(subscription_uuid: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚¨ÖÔ∏è –ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º",
        callback_data=f"view_devices:{subscription_uuid}:0"
    )
    return builder.as_markup()

def get_back_to_manage_kb(subscription_uuid: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
        callback_data=f"manage_subscription:{subscription_uuid}"
    )
    return builder.as_markup()

def get_no_subscriptions_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
    builder.button(text=BACK_BUTTON, callback_data="menu:main")
    builder.adjust(1, 1)
    return builder.as_markup()