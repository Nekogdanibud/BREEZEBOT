from aiogram.types import CallbackQuery
from core.database.crud import get_purchased_subscriptions
from core.api.remnawave_client import remnawave_service
from . import texts, keyboards
from core.database.database import async_session
import logging
from core.database import crud

logger = logging.getLogger(__name__)

async def show_subscriptions(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏' (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    try:
        await callback.answer()
        user_id = callback.from_user.id
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            local_subscriptions = await get_purchased_subscriptions(session, user_id)
            
            if not local_subscriptions:
                await callback.message.edit_text(
                    texts.NO_SUBSCRIPTIONS_TEXT,
                    reply_markup=keyboards.get_no_subscriptions_kb()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            subscriptions_info = []
            for sub in local_subscriptions:
                subscriptions_info.append({
                    "uuid": sub.sub_uuid,
                    "username": sub.username
                })
            
            await callback.message.edit_text(
                texts.SUBSCRIPTIONS_LIST_TEXT,
                reply_markup=keyboards.get_subscriptions_list_kb(subscriptions_info)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_subscriptions: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫", show_alert=True)

async def show_subscription_detail(callback: CallbackQuery) -> None:
    """–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤ API –ø–æ UUID"""
    try:
        await callback.answer()
        subscription_uuid = callback.data.split(":")[1]
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            local_sub = await crud.get_purchased_subscription_by_uuid(session, subscription_uuid)
            if not local_sub:
                await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –≤ API
            sub_info = await remnawave_service.get_subscription_by_uuid(subscription_uuid)
            
            if "error" in sub_info:
                await callback.message.answer(
                    texts.SUBSCRIPTION_ERROR_TEXT.format(error=sub_info['error'])
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            status_emoji = {
                "active": "üü¢",
                "disabled": "üî¥",
                "expired": "üü†",
                "limited": "üü°"
            }.get(sub_info["status"].lower(), "‚ö™Ô∏è")
            
            message_text = texts.SUBSCRIPTION_DETAIL_TEMPLATE.format(
                status_emoji=status_emoji,
                username=local_sub.username,
                status=sub_info['status'].capitalize(),
                used_traffic=sub_info['used_traffic_bytes'] / (1024 ** 3),
                data_limit=sub_info['data_limit'],
                expire=sub_info['expire'],
                last_connected=sub_info['last_connected_node'],
                purchase_price=float(local_sub.purchase_price) if local_sub.purchase_price else 0.0,
                renewal_price=float(local_sub.renewal_price) if local_sub.renewal_price else 0.0
            )
            
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboards.get_subscription_detail_kb(
                    subscription_uuid=subscription_uuid,
                    subscription_url=sub_info['subscription_url']
                ),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_subscription_detail: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
